/**
 * Находит заданное число в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить входные параметры.
 * 2. Инициализировать переменную `found` значением `false`.
 * 3. Начать цикл по элементам массива.
 * 4. Для каждого элемента массива:
 *    1. Сравнить текущий элемент с искомым числом.
 *    2. Если они равны:
 *       1. Вывести сообщение "Найдено значение: [число]".
 *       2. Установить `found` в `true`.
 *       3. Прервать цикл.
 * 5. Если цикл завершился и `found` осталось `false`, вывести "Значение [число] не найдено".
 * 6. Вернуть значение `found`.
 *
 * @param {Array<number>} arr - массив чисел, в котором выполняется поиск
 * @param {number} target - искомое число
 * @return {boolean} true, если число найдено, иначе false
 * @throws {Error} если массив пуст
 */
export function searchNumber(arr, target) {
    throw Error('method searchNumber is not implemented yet');
}

/**
 * Находит максимальное число в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Инициализировать переменную `max` первым элементом массива.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Сравнить текущий элемент с `max`.
 *    2. Если текущий элемент больше `max`, обновить `max`.
 * 6. Вернуть `max`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {number} максимальное число в массиве
 * @throws {Error} если массив пуст
 */
export function findMax(arr) {
    throw Error('method findMax is not implemented yet');
}

/**
 * Находит минимальное число в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Инициализировать переменную `min` первым элементом массива.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Сравнить текущий элемент с `min`.
 *    2. Если текущий элемент меньше `min`, обновить `min`.
 * 6. Вернуть `min`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {number} минимальное число в массиве
 * @throws {Error} если массив пуст
 */
export function findMin(arr) {
    throw Error('method findMin is not implemented yet');
}

/**
 * Подсчитывает количество четных чисел в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Инициализировать переменную `count` значением `0`.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Проверить, четное ли число.
 *    2. Если число четное, увеличить `count` на 1.
 * 6. Вернуть `count`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {number} количество четных чисел в массиве
 * @throws {Error} если массив пуст
 */
export function countEvenNumbers(arr) {
    throw Error('method countEvenNumbers is not implemented yet');
}

/**
 * Подсчитывает сумму всех элементов в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Инициализировать переменную `sum` значением `0`.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Добавить текущий элемент к `sum`.
 * 6. Вернуть `sum`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {number} сумма всех элементов в массиве
 * @throws {Error} если массив пуст
 */
export function sumOfArray(arr) {
    throw Error('method sumOfArray is not implemented yet');
}

/**
 * Находит среднее значение элементов в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Инициализировать переменную `sum` значением `0`.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Добавить текущий элемент к `sum`.
 * 6. Вычислить среднее значение как `sum / длина массива`.
 * 7. Вернуть `average`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {number} среднее значение элементов в массиве
 * @throws {Error} если массив пуст
 */
export function averageOfArray(arr) {
    throw Error('method averageOfArray is not implemented yet');
}

/**
 * Проверяет, содержит ли массив дубликаты.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Начать внешний цикл по элементам массива.
 * 4. Для каждого элемента внешнего цикла:
 *    1. Начать внутренний цикл по оставшимся элементам массива.
 *    2. Для каждого элемента внутреннего цикла:
 *       1. Сравнить текущий элемент внешнего цикла с текущим элементом внутреннего цикла.
 *       2. Если они равны:
 *          1. Вернуть `true`.
 * 5. Если дубликаты не найдены, вернуть `false`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {boolean} true, если дубликаты найдены, иначе false
 * @throws {Error} если массив пуст
 */
export function hasDuplicates(arr) {
    throw Error('method hasDuplicates is not implemented yet');
}

/**
 * Находит индекс заданного числа в массиве.
 * Если число найдено, возвращает индекс, иначе — -1.
 *
 * Алгоритм:
 * 1. Начать цикл по элементам массива.
 * 2. Для каждого элемента массива:
 *    1. Сравнить текущий элемент с искомым числом.
 *    2. Если они равны:
 *       1. Вернуть индекс текущего элемента.
 * 3. Если цикл завершился и число не найдено, вернуть -1.
 *
 * @param {Array<number>} arr - массив чисел
 * @param {number} target - искомое число
 * @return {number} индекс числа, если найдено, иначе -1
 */
export function findIndex(arr, target) {
    throw Error('method findIndex is not implemented yet');
}

/**
 * Находит второе по величине число в массиве.
 * Если массив пуст или содержит только один элемент, выбрасывает исключение с сообщением "Массив слишком мал".
 *
 * Алгоритм:
 * 1. Проверить, содержит ли массив хотя бы два элемента.
 * 2. Если массив слишком мал:
 *    1. Выбросить исключение "Массив слишком мал".
 * 3. Инициализировать переменные `max` и `secondMax` минимально возможными значениями.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Сравнить текущий элемент с `max`.
 *    2. Если текущий элемент больше `max`:
 *       1. Обновить `secondMax` значением `max`.
 *       2. Обновить `max` текущим элементом.
 *    3. Иначе, если текущий элемент больше `secondMax`, обновить `secondMax`.
 * 6. Вернуть `secondMax`.
 *
 * @param {Array<number>} arr - массив чисел
 * @return {number} второе по величине число в массиве
 * @throws {Error} если массив слишком мал
 */
export function findSecondMax(arr) {
    throw Error('method findSecondMax is not implemented yet');
}

/**
 * Подсчитывает количество вхождений заданного числа в массиве.
 * Если массив пуст, выбрасывает исключение с сообщением "Массив пуст".
 *
 * Алгоритм:
 * 1. Проверить, пуст ли массив.
 * 2. Если массив пуст:
 *    1. Выбросить исключение "Массив пуст".
 * 3. Инициализировать переменную `count` значением `0`.
 * 4. Начать цикл по элементам массива.
 * 5. Для каждого элемента массива:
 *    1. Сравнить текущий элемент с искомым числом.
 *    2. Если они равны, увеличить `count` на 1.
 * 6. Вернуть `count`.
 *
 * @param {Array<number>} arr - массив чисел
 * @param {number} target - искомое число
 * @return {number} количество вхождений числа в массиве
 * @throws {Error} если массив пуст
 */
export function countOccurrences(arr, target) {
    throw Error('method countOccurrences is not implemented yet');
}

/**
 * Проверяет, является ли число простым.
 *
 * Алгоритм:
 * 1. Проверить, меньше или равно ли число 1.
 * 2. Если да, вернуть `false`.
 * 3. Начать цикл от 2 до квадратного корня числа.
 * 4. Для каждого числа в цикле:
 *    1. Проверить, делится ли число без остатка.
 *    2. Если да, вернуть `false`.
 * 5. Если цикл завершился и число не делится ни на одно из чисел, вернуть `true`.
 *
 * @param {number} num - число для проверки
 * @return {boolean} true, если число простое, иначе false
 */
export function isPrime(num) {
    throw Error('method isPrime is not implemented yet');
}

/**
 * Проверяет, является ли переданная строка палиндромом.
 * Палиндром — это строка, которая читается одинаково как слева направо, так и справа налево,
 * например: "madam", "racecar", "level". Пустая строка и 'null' считаются палиндромами.
 * Алгоритм работы метода:
 * 1. Если строка 'null' или пуста, возвращается 'true'
 *    так как такие строки считаются палиндромами.
 * 2. Создаются два указателя:
 *    - left: указывает на начало строки (0)
 *    - right: указывает на конец строки (str.length() - 1)
 * 3. Запускается цикл, который выполняется, пока left < right:
 *    3.1. Сравниваются символы
 *    3.2. Если символы не равны, метод возвращает 'false'
 *    3.3. Если символы равны:
 *         - увеличивается left
 *         - уменьшается right
 * 4. Если весь цикл пройден без возврата false, значит строка — па
 *    Возвращается 'true'.
 *
 * @param {string} str строка для проверки
 * @return {boolean} true, если строка является палиндромом, иначе false
 */
export function isPalindrome(str) {
    throw Error('method isPalindrome is not implemented yet');
}

/**
 * Находит сумму положительных и отрицательных чисел в массиве и выводит результат.
 *
 * Алгоритм:
 * 1. Создаем переменные для хранения суммы положительных (positiveSum) и отрицательных (negativeSum) чисел.
 * 2. Проходим по каждому элементу массива:
 *    - если элемент > 0, добавляем его к positiveSum;
 *    - если элемент < 0, добавляем его к negativeSum;
 *    - если элемент равен 0, игнорируем.
 * 3. После цикла выводим обе суммы.
 *
 * @param {Array<number>} arr - массив целых чисел
 */
export function sumPositiveNegative(arr) {
    throw new Error("method sumPositiveNegative is not implemented yet");
}

/**
 * Проверяет, отсортирован ли массив по возрастанию.
 *
 * Алгоритм:
 * 1. Проходим по массиву от начала до предпоследнего элемента.
 * 2. На каждой итерации сравниваем текущий элемент с следующим.
 *    - Если текущий элемент больше следующего, массив не отсортирован.
 * 3. Если не нашли нарушений, возвращаем true.
 *
 * @param {Array<number>} arr - массив целых чисел
 * @return {boolean} true, если массив отсортирован по возрастанию, иначе false
 */
export function isSortedAscending(arr) {
    throw new Error("method isSortedAscending is not implemented yet");
}

/**
 * Разворачивает массив в обратном порядке.
 *
 * Алгоритм:
 * 1. Создаем новый массив той же длины.
 * 2. Идём по исходному массиву с конца, копируя элементы в начало нового.
 *    - arr[i] копируем в reversed[length - 1 - i]
 * 3. Возвращаем полученный массив.
 *
 * @param {Array<number>} arr - исходный массив
 * @return {Array<number>} новый массив в обратном порядке
 */
export function reverseArray(arr) {
    throw new Error("method reverseArray is not implemented yet");
}

/**
 * Удаляет все нули из массива и возвращает новый массив без нулей.
 *
 * Алгоритм:
 * 1. Подсчитываем количество ненулевых элементов.
 * 2. Создаем новый массив нужной длины.
 * 3. Повторно проходим по исходному массиву:
 *    - если элемент не равен 0, добавляем его в новый массив.
 * 4. Возвращаем новый массив.
 *
 * @param {Array<number>} arr - исходный массив
 * @return {Array<number>} новый массив без нулей
 */
export function removeZeros(arr) {
    throw new Error("method removeZeros is not implemented yet");
}

