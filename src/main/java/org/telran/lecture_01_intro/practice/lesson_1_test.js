import {
  searchNumber, findMax, findMin, countEvenNumbers,
  sumOfArray, averageOfArray, hasDuplicates, findIndex,
  findSecondMax, countOccurrences, isPrime, isPalindrome,
  sumPositiveNegative, isSortedAscending, reverseArray, removeZeros
} from './lesson_1.js';
import { logTestCase,logTestCaseWithException } from '../../utils/common_util.js';

// searchNumber
function testSearchNumber() {
  console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ searchNumber:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 3", searchNumber([1, 2, 3, 4, 5], 3), true);
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 6", searchNumber([1, 2, 3, 4, 5], 6), false);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => searchNumber([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// findMax
function testFindMax() {
  console.log("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findMax:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 5", findMax([1, 2, 3, 4, 5]), 5);
  logTestCase("–ú–∞—Å—Å–∏–≤ [-1,-2,-3,-4,-5], —á–∏—Å–ª–æ -1", findMax([-1, -2, -3, -4, -5]), -1);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => findMax([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// findMin
function testFindMin() {
  console.log("üìâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findMin:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 1", findMin([1, 2, 3, 4, 5]), 1);
  logTestCase("–ú–∞—Å—Å–∏–≤ [-1,-2,-3,-4,-5], —á–∏—Å–ª–æ -5", findMin([-1, -2, -3, -4, -5]), -5);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => findMin([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// countEvenNumbers
function testCountEvenNumbers() {
  console.log("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ countEvenNumbers:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 2", countEvenNumbers([1, 2, 3, 4, 5]), 2);
  logTestCase("–ú–∞—Å—Å–∏–≤ [2,4,6,8,10], —á–∏—Å–ª–æ 5", countEvenNumbers([2, 4, 6, 8, 10]), 5);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => countEvenNumbers([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// sumOfArray
function testSumOfArray() {
  console.log("‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sumOfArray:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 15", sumOfArray([1, 2, 3, 4, 5]), 15);
  logTestCase("–ú–∞—Å—Å–∏–≤ [-1,-2,-3,-4,-5], —á–∏—Å–ª–æ -15", sumOfArray([-1, -2, -3, -4, -5]), -15);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => sumOfArray([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// averageOfArray
function testAverageOfArray() {
  console.log("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ averageOfArray:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 3", averageOfArray([1, 2, 3, 4, 5]), 3);
  logTestCase("–ú–∞—Å—Å–∏–≤ [10,20,30,40,50], —á–∏—Å–ª–æ 30", averageOfArray([10, 20, 30, 40, 50]), 30);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => averageOfArray([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// hasDuplicates
function testHasDuplicates() {
  console.log("üîÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ hasDuplicates:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ—Ç", hasDuplicates([1, 2, 3, 4, 5]), false);
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,4], –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—Å—Ç—å", hasDuplicates([1, 2, 3, 4, 4]), true);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", () => hasDuplicates([]), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// findIndex
function testFindIndex() {
  console.log("üìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findIndex:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 3, –∏–Ω–¥–µ–∫—Å 2", findIndex([1, 2, 3, 4, 5], 3), 2);
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 6, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", findIndex([1, 2, 3, 4, 5], 6), -1);
  logTestCase("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á–∏—Å–ª–æ 1, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", findIndex([], 1), -1);
  console.log();
}

// findSecondMax
function testFindSecondMax() {
  console.log("ü•à –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ findSecondMax:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 4", findSecondMax([1, 2, 3, 4, 5]), 4);
  logTestCase("–ú–∞—Å—Å–∏–≤ [5,4,3,2], —á–∏—Å–ª–æ 4", findSecondMax([5, 4, 3, 2]), 4);
  logTestCaseWithException("–ú–∞—Å—Å–∏–≤ [1], –º–∞—Å—Å–∏–≤ –º–∞–ª", () => findSecondMax([1]), "–ú–∞—Å—Å–∏–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª");
  console.log();
}

// countOccurrences
function testCountOccurrences() {
  console.log("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ countOccurrences:");
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5,3,3], —á–∏—Å–ª–æ 3, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 3", countOccurrences([1, 2, 3, 4, 5, 3, 3], 3), 3);
  logTestCase("–ú–∞—Å—Å–∏–≤ [1,2,3,4,5], —á–∏—Å–ª–æ 6, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0", countOccurrences([1, 2, 3, 4, 5], 6), 0);
  logTestCaseWithException("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á–∏—Å–ª–æ 1, –ø—É—Å—Ç", () => countOccurrences([], 1), "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç");
  console.log();
}

// isPrime
function testIsPrime() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ isPrime:");
  logTestCase("–ß–∏—Å–ª–æ 5", isPrime(5), true);
  logTestCase("–ß–∏—Å–ª–æ 4", isPrime(4), false);
  logTestCase("–ß–∏—Å–ª–æ 1", isPrime(1), false);
  console.log();
}

function testIsPalindrome() {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ isPalindrome:");

    // –¢–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'madam'", isPalindrome("madam"), true);

    // –¢–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'hello'", isPalindrome("hello"), false);

    // –¢–µ—Å—Ç –¥–ª—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    logTestCase("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞", isPalindrome(""), true);

    // –¢–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'a'", isPalindrome("a"), true);

    // –¢–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'A man, a plan, a canal: Panama'", isPalindrome("A man, a plan, a canal: Panama"), false);

    // –¢–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏
    logTestCase("–°—Ç—Ä–æ–∫–∞ 'Madam'", isPalindrome("Madam"), false);

    console.log();
}

function testIsSortedAscending() {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ isSortedAscending:");

    // –¢–µ—Å—Ç –¥–ª—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, 2, 3, 4, 5]", isSortedAscending([1, 2, 3, 4, 5]), true);

    // –¢–µ—Å—Ç –¥–ª—è –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    logTestCase("–ú–∞—Å—Å–∏–≤ [5, 2, 3, 1, 4]", isSortedAscending([5, 2, 3, 1, 4]), false);

    console.log();
}

function testReverseArray() {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reverseArray:");

    // –¢–µ—Å—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, 2, 3, 4, 5]", JSON.stringify(reverseArray([1, 2, 3, 4, 5])), JSON.stringify([5, 4, 3, 2, 1]));

    console.log();
}

function testRemoveZeros() {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ removeZeros:");

    // –¢–µ—Å—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å –Ω—É–ª—è–º–∏
    logTestCase("–ú–∞—Å—Å–∏–≤ [1, 0, 2, 0, 3]", JSON.stringify(removeZeros([1, 0, 2, 0, 3])), JSON.stringify([1, 2, 3]));

    console.log();
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
testSearchNumber();
testFindMax();
testFindMin();
testCountEvenNumbers();
testSumOfArray();
testAverageOfArray();
testHasDuplicates();
testFindIndex();
testFindSecondMax();
testCountOccurrences();
testIsPrime();
testIsPalindrome();
testIsSortedAscending();
testReverseArray();
testRemoveZeros();